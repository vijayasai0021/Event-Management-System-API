// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// user model with role-based system

enum UserRole{
  ADMIN
  EVENT_CONDUCTOR
  USER
}

model User{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  firstname String
  lastname String
  phone String?
  avatar String?
  role UserRole @default(USER)
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordResetToken String? @db.VarChar(255)
  passwordResetExpires DateTime?
  
  isVerified Boolean @default(false)
  verificationToken String?
  verificationExpires DateTime?

  // Relations
  organizedEvents Event[] @relation("EventOrganizer")
  registrations Registration[]
  notifications Notification[]
  createdCategories Category[] @relation("CategoryCreator")

  @@map("users")

}

model Category{
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  color String?
  icon String?
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // relations

  events Event[]
  createdBy User @relation("CategoryCreator", fields: [creatorId], references: [id])
  creatorId Int

  @@map("categories")

}

model Event{
  id Int @id @default(autoincrement())
  title String
  description String
  shortDescrption String?
  image String?
  venue String
  address String
  city String
  state String?
  zipCode String?
  startDate DateTime
  endDate DateTime
  registrationDeadline DateTime?
  maxAttendees Int
  registrationFee Decimal @default(0.00) @db.Decimal(10,2)
  currency String @default("USD")
  status EventStatus @default(DRAFT)
  isPrivate Boolean @default(false)
  invitationCode String? @unique
  tags String? //JSON string for tags
  requirements String? @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  // relations
  organizer User @relation("EventOrganizer",fields: [organizerId],references: [id])
  organizerId Int
  category Category @relation(fields: [categoryId],references: [id])
  categoryId Int
  registrations Registration[]
  agenda AgendaItem[]
  notifications Notification[]

  @@map("events")
}

enum EventStatus{
  DRAFT //Event is being created
  PUBLISHED //Event is live and accepting registrations
  CANCELLED //Event has been cancelled
  COMPLETED //Event has finished
  POSTPONED //Event has been postponed
}

model AgendaItem{
  id Int @id @default(autoincrement())
  time String
  title String
  description String?
  speaker String?
  duration Int? //Duration in minutes
  location String? //specific room/area within venue
  createdAt DateTime @default(now())

  // relations 
  event Event @relation(fields: [eventId],references: [id],onDelete: Cascade)
  eventId Int

  @@map("agenda_items")
}

model Registration{
  id Int @id @default(autoincrement())
  registrationNumber String @unique @default(cuid())
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String? 
  transactionId String?
  amountPaid Decimal  @default(0.00) @db.Decimal(10,2)
  specialRequirements String? @db.Text
  checkInStatus Boolean @default(false)
  checkInTime DateTime? 
  qrCode String? @unique
  registeredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Attendee information
  emergencyContactName String?
  emergencyContactPhone String?
  emergencyContactRelationship String?
  dietaryRestrictions String?
  accessibilityNeeds String?

  // Feedback  post-event
  rating Int? //1-5 years
  feedback String? @db.Text
  feedbackAt DateTime?


  // relations 
  user User @relation(fields: [userId],references: [id])
  userId Int
  event Event @relation(fields: [eventId],references: [id],onDelete: Cascade)
  eventId Int
  
  @@unique([userId,eventId])
  @@map("registrations")
}

//Payment status enum

enum PaymentStatus{
  PENDING //Payment not yet made
  PAID //Payment completed
  FAILED //payment failed
  CANCELLED //Regsitation cancelled
  REFUNDED  //Payment refunded
}

model Notification{
  id Int @id @default(autoincrement())
  title String
  message String @db.Text
  type NotificationType @default(INFO)
  isRead Boolean @default(false)
  createdAt DateTime @default(now())

  // Relations 
  useer User @relation(fields: [userId],references: [id])
  userId Int
  event Event? @relation(fields: [eventId],references: [id])
  eventId Int?

  @@map("notifications")
}

enum NotificationType{
  INFO //general information
  EVENT_REMINDER //Event remainder
  REGISTRATION_CONFIRMED //Registration confirmation
  EVENT_CANCELLED //Event cancellation
  EVENT_UPDATED //Event details updated
  PAYMENT_RECEIVED //Payment confiramtion
  CHCEK_IN_REMAINDER //check-in remainder
}


// System settings (for admin configuraion)
model Setting{
  id Int @id @default(autoincrement())
  key String @unique
  value String @db.Text
  description String?
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// Contact/Support messages
model ContactMessage{
  id Int @id @default(autoincrement())
  name String
  email String
  subject String
  message String @db.Text
  status ContactMessageStatus @default(OPEN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

enum ContactMessageStatus{
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}




